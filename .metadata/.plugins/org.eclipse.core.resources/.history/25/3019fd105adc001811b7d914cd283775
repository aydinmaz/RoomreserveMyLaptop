package it.finsoft.RoomReserve.controller;

import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import it.finsoft.RoomReserve.model.Room;
import it.finsoft.RoomReserve.model.User;
import it.finsoft.RoomReserve.repository.Room2Repository;
import it.finsoft.RoomReserve.repository.Room3Repository;
import it.finsoft.RoomReserve.repository.RoomRepository;
import it.finsoft.RoomReserve.repository.UserRepository;
import it.finsoft.RoomReserve.service.SecurityService;
import it.finsoft.RoomReserve.service.UserService;
import it.finsoft.RoomReserve.validator.UserValidator;

@Controller
public class UserController {
	@Autowired
	private UserService userService;

	@Autowired
	private SecurityService securityService;

	@Autowired //
	private RoomRepository roomrpstry;

	@Autowired //
	private Room2Repository roomrpstry2;

	@Autowired //
	private Room3Repository roomrpstry3;

	@Autowired
	private UserRepository usrrpsitry;

	@Autowired
	private UserValidator userValidator;

	@RequestMapping(value = "registration", method = RequestMethod.GET)
	public String registration(Model model) {
		model.addAttribute("userForm", new User());
		return "registration";
	}

	@RequestMapping(value = "registration", method = RequestMethod.POST)
	public String registration(@ModelAttribute("userForm") User userForm, BindingResult bindingResult, Model model) {
		userValidator.validate(userForm, bindingResult);
		if (bindingResult.hasErrors()) {
			return "/registration";
		}
		userService.save(userForm);
		securityService.autologin(userForm.getUsername(), userForm.getPasswordConfirm());
		return "welcome";
	}

	@RequestMapping(value = "/reservation", method = RequestMethod.GET)
	public String reservation(Model model) { // List<Room> rooms2= new ArrayList<>();
		List<Room> rooms1 = roomrpstry.findAll();
		List<Room> rooms2 = roomrpstry2.findAll();
		List<Room> rooms3 = roomrpstry3.findAll();

		String usernameOfloggeduser = securityService.findLoggedInUsername();
		model.addAttribute("currentuser", usernameOfloggeduser);
		model.addAttribute("rooms1", rooms1);
		model.addAttribute("rooms2", rooms2);
		model.addAttribute("rooms3", rooms3);
		return "reservation";
	}

	@RequestMapping(value = "/reservationTest", method = RequestMethod.GET)
	public void reservationAjax(HttpServletRequest req) {
		// String id = req.getParameter("room_id");
		String id = req.getParameter("room_id");// in room_id dar jsp dar ajax neveshte shode ,yani dakhele httpreq
												// ,room_id gozashte shode

		String id_part1 = id.substring(0, 1);
		String id_part2 = id.substring(1);

		Long id_room = Long.parseLong(id_part2);
		System.out.println("idt1: " + id_part1);
		System.out.println("idt2: " + id_part2);
		// your logic here

		String usernameOfloggeduser = securityService.findLoggedInUsername();
		User currentuser = usrrpsitry.findByUsername(usernameOfloggeduser);

		Optional<Room> clickedroom;
		// Optional<Room2> clickedroom2;
		// Optional<Room3> clickedroom3;
		boolean clickedroom_value;
		List<Room> roomsOfcurrentuser;
		// List<Room2> roomsOfcurrentuser2;
		// List<Room3> roomsOfcurrentuser3;

		if (id_part1.equals("1")) {
			clickedroom = roomrpstry.findById(id_room);
			clickedroom_value = clickedroom.get().isConfirm();
			roomsOfcurrentuser = currentuser.getRooms();

			if (!clickedroom_value) {
				clickedroom.get().setConfirm(true);
				roomsOfcurrentuser.add(clickedroom.get());
				clickedroom.get().setUser(currentuser);
			} else {
				clickedroom.get().setConfirm(false);
				roomsOfcurrentuser.remove(clickedroom.get());
				clickedroom.get().setUser(null);
			}
			roomrpstry.save(clickedroom.get());
		}

		else if (id_part1.equals("2")) {
			clickedroom = roomrpstry2.findById(id_room);
			clickedroom_value = clickedroom.get().isConfirm();
			roomsOfcurrentuser = currentuser.getRooms();

			if (!clickedroom_value) {
				clickedroom.get().setConfirm(true);
				roomsOfcurrentuser.add(clickedroom.get());
				clickedroom.get().setUser(currentuser);
			} else {
				clickedroom.get().setConfirm(false);
				roomsOfcurrentuser.remove(clickedroom.get());
				clickedroom.get().setUser(null);
			}
			roomrpstry2.save(clickedroom.get());
		} else {
			clickedroom = roomrpstry3.findById(id_room);
			clickedroom_value = clickedroom.get().isConfirm();
			roomsOfcurrentuser = currentuser.getRooms();

			if (!clickedroom_value) {
				clickedroom.get().setConfirm(true);
				roomsOfcurrentuser.add(clickedroom.get());
				clickedroom.get().setUser(currentuser);
			} else {
				clickedroom.get().setConfirm(false);
				roomsOfcurrentuser.remove(clickedroom.get());
				clickedroom.get().setUser(null);
			}

			roomrpstry3.save(clickedroom.get());
		}

	}

	/*
	 * @RequestMapping(value="reservation",method=RequestMethod.POST)
	 * 
	 * public @ResponseBody String addId(@RequestBody Id id throws ParseException,
	 * IOException {
	 * 
	 * log.debug("Adding new person"); try {// perform add operation return
	 * "Successfully added person"; } catch (Exception ex) {} }
	 * 
	 */

	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login(Model model, String error, String logout) {
		if (error != null)
			model.addAttribute("error", "Your username and password is invalid.");

		if (logout != null)
			model.addAttribute("message", "You have been logged out successfully.");

		return "login";
	}

	@RequestMapping(value = { "/", "/welcome" }, method = RequestMethod.GET)
	public String welcome(Model model) {
		return "welcome";
	}

}